    首先需要声明的是以下这些东西绝大部分是我从网上的资料整理下来后，按照我自己的理解添油加醋所写的，所以可能有一些地方不大正确啦啦啦

1、Git
    什么是Git？
    ————Git是一个开源的/分布式/版本控制/系统（具体是个啥下面会解释），用以有效、高速的处理从很小到非常大的项目的版本管理。当时是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。不过我觉得大部分人和我一样对历史不感兴趣所以我就不写了耶！

2、SVN
    和Git一样，SVN也是一个版本控制系统，但它是集中式的。
    SVN不是这次要讲的重点。但是我想应该可以通过与Git的对比来帮助理解吧。

3、版本控制
    事实上版本控制就是把每次写的代码都储存备份起来，或是在团队合作的时候保证每个人手上的代码都是最新版本的（不过我只知道在IDE里面会有提醒，命令行下就不清楚了）。
    当然我们也可以通过一个网盘或者QQ群共享来储存每次代码的更新。当然作为爱装[哔————]的Geek外加懒惰的程序员我们还是希望有工具能自动帮忙完成的对吧……

4、分布式与集中式【我当时并没有仔细去分析这两种方式】
    首先要声明的，其实这在一个人码代码的时候没什么区别，以下都是建立在团队合作的基础上写的。
    分布式和集中式的最大区别在于：在分布式中，开发者可以本地提交，每个开发者的机器上都有一个服务器的数据库（包括代码和版本信息）；而集中式更像是一个代码仓库。
    也就是说，Git会从服务器clone一个副本到机器上，修改的时候通常是在本地修改好后再提交。等到形成发布的版本后，再把代码发布到svn服务器上。
    而SVN则是直接提交到服务器端，如果有人先你一步提交了，那你得重新把最新的版本下下来……（这是一种叫文件锁的机制）

    还是再稍微解释一下好了，其实我也理解得不是很透彻。
    分布式就像是民主制。【但我历史不好不确定集中式是不是就是中央集权制】
    每个人的机器上都是一个完整的库，因此大家可以将代码提交到中央服务器上再统一pull别人的代码，但也可以直接pull或push某个成员的库。
    这样就使得Git更为灵活，在PUSH到服务器的时候不会有太大的冲突。

    我们可以假设有一个很大的Project，有几百人一起准备提交代码。
    如果是SVN，大家就要抢着去做第一个更新的人，不然其他人都要把最新版本下下来解决冲突后继续去抢……应该可以比喻为串行的机制？
    然后Git的话大家可以分成几个小组先互相解决冲突，然后再由小组的其中一个人与另外小组的一个人解决冲突……也就是并行的思想。
    当然Git也可以当成SVN那样用就是。
    
5、分支
    分支也是在版本控制中需要知道的概念。【但是我只是知道有这东西却从来没有用过】
    分支就是让你可以从开发的主线上分离开来，然后在不影响主线的同时继续工作。
    假设我们已经写好了一个程序（这个就叫做主干），后来为实现某个新的需求，我们要创建一个分支，然后开始在这个分支上开展工作。
    忽然，有人打电话过来说有个很严重的问题需要紧急修补。我们就可以先返回到主干上，为这次Debug建立一个新分支。在Debug结束后，我们回到主干，将修补的分支合并进来，然后再推送到服务器上。然后我们就可以再切换到之前为了实现新需求的那个分支，继续工作。
    差不多就算这个思想。

6、GitHub与Git
    2013年1月20日左右，GitHub在中国大陆被官方的防火长城封锁，李开复等一些微博大号呼吁解禁GitHub，微博转发近10万条。2013年1月23日github网站恢复正常访问。
    我记得当时好像是有这个事情……但是我那时候还什么都不明白哈哈哈。
    GitHub其实也就是一个专门为Git服务的代码托管网站，但好像也支持SVN来着。
    不过我没用过所以不好介绍啦。
    “GitHub可以托管各种git库，并提供一个web界面，但与其它像 SourceForge或Google Code这样的服务不同，GitHub的独特卖点在于从另外一个项目进行分支的简易性。”
    SVN的话用Google Code还是蛮方便的。
    
7、总结
    当然，说了这么多，用不用都没关系。
    毕竟这只是一个工具而已，倒时候有需要就自然而然会去用了。
    我只是负责普及的而已啦～
    软院在大一下的时候会超级简单地介绍一下这东西，大二的时候才会简单地用到，而且还是推荐去用SVN……
    但是我也就是拿来当网盘用而已哈哈哈……


